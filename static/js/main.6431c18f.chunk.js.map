{"version":3,"sources":["Counter.js","App.js","index.js"],"names":["CounterHooks","initialCount","console","log","useState","count","setCount","onClick","prevCount","App","ReactDOM","render","document","getElementById"],"mappings":"+IAMe,SAASA,EAAT,GAAyC,IAAjBC,EAAgB,EAAhBA,aACrCC,QAAQC,IAAI,kBACZ,MAA0BC,mBAASH,GAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,OACE,gCACE,wBAAQC,QAAS,kBAAMD,GAAS,SAACE,GAAD,OAAeA,EAAY,MAA3D,eACA,+BAAOH,IACP,wBAAQE,QAAS,kBAAMD,GAAS,SAACE,GAAD,OAAeA,EAAY,MAA3D,kBCJSC,MAPf,WAIE,OAHAP,QAAQC,IAAI,cAGL,cAAC,EAAD,CAASF,aAAc,KCFhCS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6431c18f.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n//Hooks need to be called in the exact same order every single time\n//and also they need to be at the top level of your functiom\n//you can't put hooks in if statements because they would render conditionally\n\nexport default function CounterHooks({ initialCount }) {\n  console.log('Render Counter');\n  const [count, setCount] = useState(initialCount);\n  return (\n    <div>\n      <button onClick={() => setCount((prevCount) => prevCount - 1)}>-</button>\n      <span>{count}</span>\n      <button onClick={() => setCount((prevCount) => prevCount + 1)}>+</button>\n    </div>\n  );\n}\n","import Counter from './Counter';\n\nfunction App() {\n  console.log('Render App');\n  //Passes down initalCount as 0 down to <Counter/>\n  //access it by deconstructing it inside function parameters\n  return <Counter initialCount={0}/>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}